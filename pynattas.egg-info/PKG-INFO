Metadata-Version: 2.1
Name: pynattas
Version: 0.0.0
Summary: Pynattas, a powerful open-source Python package that provides a comprehensive set of tools for model building and deployment
Home-page: https://github.com/sirbastiano/PyNA-tta-S
Author: Roberto Del Prete and Andrea Mazzeo
Author-email: robertodelprete88@gmail.com
Project-URL: Source, https://github.com/sirbastiano/PyNA-tta-S
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: GIS
Classifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)
Classifier: Programming Language :: Python :: 3.8
Classifier: Environment :: GPU :: NVIDIA CUDA :: 11.0
Requires-Python: >=3.8, <4
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: opencv-python
Requires-Dist: pandas
Requires-Dist: tqdm
Requires-Dist: matplotlib
Requires-Dist: seaborn
Requires-Dist: rasterio
Requires-Dist: tifffile

# PyNA-tta-S

![PyNA-tta-S](SRC/BG.png?raw=true)

## Overview
PyNA-tta-S is the pi├▒ata package designed for onboard deployment optimization on edge devices. It leverages advanced metaheuristic optimization algorithms, including Genetic Algorithm (GA), Particle Swarm Optimization (PSO), and Grey Wolf Optimizer (GWO), to efficiently determine the most effective model architecture.

## Key Features
- Metaheuristic Algorithms: Incorporates GA, PSO, and GWO for robust optimization.
- Model Architecture Selection: Automates the selection of optimal architectures for specific onboard applications.
- Edge Device Compatibility: Tailored for efficient deployment on various edge devices.
- Performance Metrics: Evaluates architectures based on predefined or custom metrics relevant to edge computing.
## Customization: 
Allows users to define custom constraints and requirements for model architecture.
User-Friendly Interface: Easy-to-use API, facilitating integration with existing projects.
## Use Cases
- IoT Applications: Optimizing models for IoT devices with limited computing resources.
- Remote Sensing: Enhancing the efficiency of models deployed in remote sensing edge devices.
- Autonomous Vehicles: Streamlining models for real-time processing in autonomous vehicles.
